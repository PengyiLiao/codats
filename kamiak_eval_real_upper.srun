#!/bin/bash
#SBATCH --job-name=eval_real
#SBATCH --output=slurm_logs/eval_%A_%a.out
#SBATCH --error=slurm_logs/eval_%A_%a.err
#SBATCH --cpus-per-task=3
#SBATCH --gres=gpu:1
#SBATCH --partition=cook,free_gpu,cahnrs_gpu,kamiak
#SBATCH --time=0-01:00:00
#SBATCH --mem=20G
#SBATCH --array=0-19

# My computer
#gpumem=4500
# SBATCH --partition=cook
# SBATCH --cpus-per-task=4
# SBATCH --gres=gpu:0
# SBATCH --mem=10G
# Kamiak
gpumem=0
# SBATCH --partition=cook,free_gpu,cahnrs_gpu,kamiak
# SBATCH --cpus-per-task=3
# SBATCH --gres=gpu:1
# SBATCH --mem=20G

. kamiak_config.sh

# Errors
handle_terminate() { echo "Exiting"; exit 1; }
handle_error() { echo "Error occurred -- exiting"; exit 1; }
trap "handle_terminate" SIGTERM SIGINT

# Get suffix, i.e. files stored in kamiak-{models,logs}-suffix
suffix=$1; shift
[[ -z $suffix ]] && { echo "no suffix specified"; handle_error; }

# Adapt in both directions, then do upper bound
model=fcn
methods=("upper")
#variants=("best" "last")
variants=("best")
# number of adaptation problems = 20
uids=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)
datasets=("ucihar" "ucihar" "ucihar" "ucihar" "ucihar" "ucihhar" "ucihhar" "ucihhar" "ucihhar" "ucihhar" "uwave" "uwave" "uwave" "uwave" "uwave" "wisdm" "wisdm" "wisdm" "wisdm" "wisdm")
sources=("" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")
targets=("1" "2" "3" "4" "5" "0" "1" "2" "3" "4" "1" "2" "3" "4" "5" "0" "1" "2" "3" "4")

# Make sure we're using the right number
correct_min=0
correct_max=$(( ${#methods[@]} * ${#variants[@]} * ${#sources[@]} - 1))
[[ ${#sources[@]} == ${#targets[@]} ]] || \
    { echo "source/target sizes should match"; handle_error; }
[[ $SLURM_ARRAY_TASK_MIN == $correct_min ]] || \
    { echo "array min should be $correct_min"; handle_error; }
[[ $SLURM_ARRAY_TASK_MAX == $correct_max ]] || \
    { echo "array max should be $correct_max"; handle_error; }

# Indexing: https://stackoverflow.com/a/34363187
index=$SLURM_ARRAY_TASK_ID
index1max=${#sources[@]}
index2max=${#variants[@]}
index3=$((index / (index1max * index2max)))
index=$((index - index3 * index1max * index2max))
index2=$((index / index1max))
index1=$((index % index1max))

method="${methods[$index3]}"
variant="${variants[$index2]}"
uid="${uids[$index1]}"
dataset_name="${datasets[$index1]}"
source="${sources[$index1]}"
target="${targets[$index1]}"

# Output name uses method from above not the "none" for "upper"
out="results/results_${suffix}_$variant-$dataset_name-$uid-$method.txt"

# Upper bound is actually "none" but without a target domain and with other args
additional_args=()
if [[ $method == "upper" ]]; then
    method="none"
    source="$target"
    target=""
    #additional_args+=("--best_source")
fi

# For DG vs. DA always pass these for being more fair.
additional_args+=("--best_source")

# Model
if [[ $method == "vrada" || $method == "rdann" ]]; then
    model="$method"
else
    model="fcn"
fi

# Argument if evaluating last model
if [[ $variant == "last" ]]; then
    additional_args+=("--last")
fi

echo "$suffix #$SLURM_ARRAY_TASK_ID" > "$out"
echo "Method: $method" >> "$out"
echo "Other args: $@" >> "$out"
echo "UID: $uid" >> "$out"
echo "$dataset_name $source --> $target" >> "$out"

cd "$remotedir"
mkdir -p results
export OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK
module load cuda/10.0.130 cudnn/7.5.1.10_cuda10.0 python3/3.7.4
{ python3 main_eval.py \
    --logdir="$logFolder-$suffix" --modeldir="$modelFolder-$suffix" \
    --jobs=1 --gpus=1 --gpumem="$gpumem" \
    --match="${dataset_name}-${uid}-${method}-[0-9]*" \
    "${additional_args[@]}" "$@" || handle_error; } | \
    tee -a "$out"
